// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	controllers "news-hub-microservices_news-api/internal/controllers"

	mock "github.com/stretchr/testify/mock"
)

// ControllersFactory is an autogenerated mock type for the ControllersFactory type
type ControllersFactory struct {
	mock.Mock
}

// GetHealthChecksController provides a mock function with given fields:
func (_m *ControllersFactory) GetHealthChecksController() controllers.HealthChecksController {
	ret := _m.Called()

	var r0 controllers.HealthChecksController
	if rf, ok := ret.Get(0).(func() controllers.HealthChecksController); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(controllers.HealthChecksController)
		}
	}

	return r0
}

// GetNewsController provides a mock function with given fields:
func (_m *ControllersFactory) GetNewsController() controllers.NewsController {
	ret := _m.Called()

	var r0 controllers.NewsController
	if rf, ok := ret.Get(0).(func() controllers.NewsController); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(controllers.NewsController)
		}
	}

	return r0
}

type mockConstructorTestingTNewControllersFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewControllersFactory creates a new instance of ControllersFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewControllersFactory(t mockConstructorTestingTNewControllersFactory) *ControllersFactory {
	mock := &ControllersFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
