// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	gorequestbuilder "github.com/juanenmellare/gorequestbuilder"

	mock "github.com/stretchr/testify/mock"
)

// RestClient is an autogenerated mock type for the RestClient type
type RestClient struct {
	mock.Mock
}

// Call provides a mock function with given fields: requestBuilder, responseObject
func (_m *RestClient) Call(requestBuilder gorequestbuilder.RequestBuilder, responseObject interface{}) (*http.Response, error) {
	ret := _m.Called(requestBuilder, responseObject)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(gorequestbuilder.RequestBuilder, interface{}) *http.Response); ok {
		r0 = rf(requestBuilder, responseObject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gorequestbuilder.RequestBuilder, interface{}) error); ok {
		r1 = rf(requestBuilder, responseObject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRestClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRestClient creates a new instance of RestClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRestClient(t mockConstructorTestingTNewRestClient) *RestClient {
	mock := &RestClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
