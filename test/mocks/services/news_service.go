// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "news-hub-microservices_news-api/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// NewsService is an autogenerated mock type for the NewsService type
type NewsService struct {
	mock.Mock
}

// AddReader provides a mock function with given fields: newsId, userId
func (_m *NewsService) AddReader(newsId uuid.UUID, userId uuid.UUID) {
	_m.Called(newsId, userId)
}

// Fetch provides a mock function with given fields:
func (_m *NewsService) Fetch() {
	_m.Called()
}

// GetTotal provides a mock function with given fields:
func (_m *NewsService) GetTotal() *int64 {
	ret := _m.Called()

	var r0 *int64
	if rf, ok := ret.Get(0).(func() *int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	return r0
}

// List provides a mock function with given fields: offset, limit, userId
func (_m *NewsService) List(offset int, limit int, userId *uuid.UUID) *[]models.News {
	ret := _m.Called(offset, limit, userId)

	var r0 *[]models.News
	if rf, ok := ret.Get(0).(func(int, int, *uuid.UUID) *[]models.News); ok {
		r0 = rf(offset, limit, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.News)
		}
	}

	return r0
}

type mockConstructorTestingTNewNewsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNewsService creates a new instance of NewsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNewsService(t mockConstructorTestingTNewNewsService) *NewsService {
	mock := &NewsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
